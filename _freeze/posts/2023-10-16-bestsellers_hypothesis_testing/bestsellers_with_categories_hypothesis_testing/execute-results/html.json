{
  "hash": "d89c37f395f7fc1bb029f400ffc7e2c1",
  "result": {
    "markdown": "---\ntitle: \"Exploring Hypothesis Testing: A Series for Beginners 1\"\ndescription: \"A series of posts exploring hypothesis testing for beginners.\"\nauthor: \"Micael García\"\ndate: \"2023-10-16\"\ncategories:\n  - EDA\n  - hypothesis-testing\n---\n\n# Exploring Hypothesis Testing: A Series for Beginners\n\n## 1. Business Understanding\n\ndataset source: https://www.kaggle.com/datasets/sootersaalu/amazon-top-50-bestselling-books-2009-2019/data\n\n### Context\nDatos sobre los 50 libros más vendidos en Amazon de 2009 a 2019. \n\n### Hypothesis to Test\n\nVamos a responder a las siguientes preguntas con validez estadística:\n\n- ¿Los géneros difieren en User Rating?\n- ¿Los géneros difieren en número de Reviews?\n- ¿Los géneros difieren en términos de precio?\n\n## 2. Data Understanding\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\n# Import libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom scipy import stats\n```\n:::\n\n\n### 2.2 Data description\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\ndf = pd.read_csv(\"bestsellers with categories.csv\")\ndf.head(10)\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Name</th>\n      <th>Author</th>\n      <th>User Rating</th>\n      <th>Reviews</th>\n      <th>Price</th>\n      <th>Year</th>\n      <th>Genre</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>10-Day Green Smoothie Cleanse</td>\n      <td>JJ Smith</td>\n      <td>4.7</td>\n      <td>17350</td>\n      <td>8</td>\n      <td>2016</td>\n      <td>Non Fiction</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>11/22/63: A Novel</td>\n      <td>Stephen King</td>\n      <td>4.6</td>\n      <td>2052</td>\n      <td>22</td>\n      <td>2011</td>\n      <td>Fiction</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>12 Rules for Life: An Antidote to Chaos</td>\n      <td>Jordan B. Peterson</td>\n      <td>4.7</td>\n      <td>18979</td>\n      <td>15</td>\n      <td>2018</td>\n      <td>Non Fiction</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1984 (Signet Classics)</td>\n      <td>George Orwell</td>\n      <td>4.7</td>\n      <td>21424</td>\n      <td>6</td>\n      <td>2017</td>\n      <td>Fiction</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5,000 Awesome Facts (About Everything!) (Natio...</td>\n      <td>National Geographic Kids</td>\n      <td>4.8</td>\n      <td>7665</td>\n      <td>12</td>\n      <td>2019</td>\n      <td>Non Fiction</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>A Dance with Dragons (A Song of Ice and Fire)</td>\n      <td>George R. R. Martin</td>\n      <td>4.4</td>\n      <td>12643</td>\n      <td>11</td>\n      <td>2011</td>\n      <td>Fiction</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>A Game of Thrones / A Clash of Kings / A Storm...</td>\n      <td>George R. R. Martin</td>\n      <td>4.7</td>\n      <td>19735</td>\n      <td>30</td>\n      <td>2014</td>\n      <td>Fiction</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>A Gentleman in Moscow: A Novel</td>\n      <td>Amor Towles</td>\n      <td>4.7</td>\n      <td>19699</td>\n      <td>15</td>\n      <td>2017</td>\n      <td>Fiction</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>A Higher Loyalty: Truth, Lies, and Leadership</td>\n      <td>James Comey</td>\n      <td>4.7</td>\n      <td>5983</td>\n      <td>3</td>\n      <td>2018</td>\n      <td>Non Fiction</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>A Man Called Ove: A Novel</td>\n      <td>Fredrik Backman</td>\n      <td>4.6</td>\n      <td>23848</td>\n      <td>8</td>\n      <td>2016</td>\n      <td>Fiction</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n- Name\n  - Título del libro\n  - Unidad: texto (categoría)\n- Author\n  - Nombre del autor\n  - Unidad: texto (categoría)\n- User Rating\n  - Calificación promedio del libro por los usuarios\n  - Unidad: número entre 0 y 5 (con decimales)\n- Reviews\n  - Número de reseñas\n  - Unidad: número entero\n- Price\n  - Precio del libro\n  - Unidad: número entero\n- Year\n  - Año en el que el libro fue de los más vendidos\n  - Unidad: año (número entero)\n- Genre\n  - Género del libro simplificado (Fiction o Non Fiction)\n  - Unidad: categorico con dos valores posibles\n\n## 3. Data preparation\n\n### 3.1 Typecasting\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\n# comprobamos el tipo de datos de las columnas\ndf.dtypes\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\nName            object\nAuthor          object\nUser Rating    float64\nReviews          int64\nPrice            int64\nYear             int64\nGenre           object\ndtype: object\n```\n:::\n:::\n\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\ncolumnas_categoricas = [\"Genre\", \"Name\", \"Author\"]\ndf[columnas_categoricas] = df[columnas_categoricas].astype(\"category\")\n```\n:::\n\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\ndf.dtypes\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\nName           category\nAuthor         category\nUser Rating     float64\nReviews           int64\nPrice             int64\nYear              int64\nGenre          category\ndtype: object\n```\n:::\n:::\n\n\n### 3.2 Handling Duplicates\n\nComprobar si hay autores o títulos iguales pero escritos diferente.\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\nfrom fuzzywuzzy import fuzz\n\n\n# Función para encontrar nombres de autores similares\ndef encontrar_similares(df, columna):\n    autores = df[columna].unique()\n    duplicados = []\n\n    for i, autor1 in enumerate(autores):\n        for autor2 in autores[i + 1 :]:\n            ratio = fuzz.ratio(autor1, autor2)\n            if ratio > 90:  # Puedes ajustar este umbral según tu criterio\n                duplicados.append((autor1, autor2))\n\n    return duplicados\n```\n:::\n\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\n# Encuentra nombres de autores similares\nduplicados = encontrar_similares(df, \"Author\")\n\nprint(\n    \"Nombres de autores que se refieren al mismo autor pero están escritos diferente:\"\n)\nfor dup in duplicados:\n    print(dup)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNombres de autores que se refieren al mismo autor pero están escritos diferente:\n('George R. R. Martin', 'George R.R. Martin')\n('J.K. Rowling', 'J. K. Rowling')\n```\n:::\n:::\n\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\n# Replace the names of the Authors with the correct ones\ndf = df.replace(\"George R. R. Martin\", \"George R.R. Martin\")\ndf = df.replace(\"J. K. Rowling\", \"J.K. Rowling\")\n```\n:::\n\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\n# Encuentra nombres de títulos similares\nduplicados = encontrar_similares(df, \"Name\")\n\nprint(\n    \"Nombres de autores que se refieren al mismo autor pero están escritos diferente:\"\n)\nfor dup in duplicados:\n    print(dup)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNombres de autores que se refieren al mismo autor pero están escritos diferente:\n('The 5 Love Languages: The Secret to Love That Lasts', 'The 5 Love Languages: The Secret to Love that Lasts')\n('The Girl Who Played with Fire (Millennium Series)', 'The Girl Who Played with Fire (Millennium)')\n```\n:::\n:::\n\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\n# Replace the names of the Authors with the correct ones\ndf = df.replace(\n    \"The 5 Love Languages: The Secret to Love That Lasts\",\n    \"The 5 Love Languages: The Secret to Love that Lasts\",\n)\ndf = df.replace(\n    \"The Girl Who Played with Fire (Millennium Series)\",\n    \"The Girl Who Played with Fire (Millennium)\",\n)\n```\n:::\n\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\ndf\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Name</th>\n      <th>Author</th>\n      <th>User Rating</th>\n      <th>Reviews</th>\n      <th>Price</th>\n      <th>Year</th>\n      <th>Genre</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>10-Day Green Smoothie Cleanse</td>\n      <td>JJ Smith</td>\n      <td>4.7</td>\n      <td>17350</td>\n      <td>8</td>\n      <td>2016</td>\n      <td>Non Fiction</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>11/22/63: A Novel</td>\n      <td>Stephen King</td>\n      <td>4.6</td>\n      <td>2052</td>\n      <td>22</td>\n      <td>2011</td>\n      <td>Fiction</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>12 Rules for Life: An Antidote to Chaos</td>\n      <td>Jordan B. Peterson</td>\n      <td>4.7</td>\n      <td>18979</td>\n      <td>15</td>\n      <td>2018</td>\n      <td>Non Fiction</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1984 (Signet Classics)</td>\n      <td>George Orwell</td>\n      <td>4.7</td>\n      <td>21424</td>\n      <td>6</td>\n      <td>2017</td>\n      <td>Fiction</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5,000 Awesome Facts (About Everything!) (Natio...</td>\n      <td>National Geographic Kids</td>\n      <td>4.8</td>\n      <td>7665</td>\n      <td>12</td>\n      <td>2019</td>\n      <td>Non Fiction</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>545</th>\n      <td>Wrecking Ball (Diary of a Wimpy Kid Book 14)</td>\n      <td>Jeff Kinney</td>\n      <td>4.9</td>\n      <td>9413</td>\n      <td>8</td>\n      <td>2019</td>\n      <td>Fiction</td>\n    </tr>\n    <tr>\n      <th>546</th>\n      <td>You Are a Badass: How to Stop Doubting Your Gr...</td>\n      <td>Jen Sincero</td>\n      <td>4.7</td>\n      <td>14331</td>\n      <td>8</td>\n      <td>2016</td>\n      <td>Non Fiction</td>\n    </tr>\n    <tr>\n      <th>547</th>\n      <td>You Are a Badass: How to Stop Doubting Your Gr...</td>\n      <td>Jen Sincero</td>\n      <td>4.7</td>\n      <td>14331</td>\n      <td>8</td>\n      <td>2017</td>\n      <td>Non Fiction</td>\n    </tr>\n    <tr>\n      <th>548</th>\n      <td>You Are a Badass: How to Stop Doubting Your Gr...</td>\n      <td>Jen Sincero</td>\n      <td>4.7</td>\n      <td>14331</td>\n      <td>8</td>\n      <td>2018</td>\n      <td>Non Fiction</td>\n    </tr>\n    <tr>\n      <th>549</th>\n      <td>You Are a Badass: How to Stop Doubting Your Gr...</td>\n      <td>Jen Sincero</td>\n      <td>4.7</td>\n      <td>14331</td>\n      <td>8</td>\n      <td>2019</td>\n      <td>Non Fiction</td>\n    </tr>\n  </tbody>\n</table>\n<p>550 rows × 7 columns</p>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\n# número de filas duplicadas\ndf.duplicated().sum()\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```\n0\n```\n:::\n:::\n\n\nEs normal no encontrar duplicados en este caso, hay libros que se repiten pero es imposible que coincidan en \"Year\". No es un error por si mismo. Pero hay un problema. Las \"Reviews\" deberían ser las que el libro tenia el año en el que fue de los mas vendidos. En lugar de eso son las del último año. Esto puede deberse a que el autor del dataset no tuvo acceso al historial de las reseñas.\n\nEs importante tener en cuenta esto para el análisis.\n\nVamos a utilizar unicamente la muestra más reciente de cada libro.\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\n# todos los libros con el titulo repetido\ndf[df.duplicated(\"Name\")].head(20)\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Name</th>\n      <th>Author</th>\n      <th>User Rating</th>\n      <th>Reviews</th>\n      <th>Price</th>\n      <th>Year</th>\n      <th>Genre</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>10</th>\n      <td>A Man Called Ove: A Novel</td>\n      <td>Fredrik Backman</td>\n      <td>4.6</td>\n      <td>23848</td>\n      <td>8</td>\n      <td>2017</td>\n      <td>Fiction</td>\n    </tr>\n    <tr>\n      <th>21</th>\n      <td>All the Light We Cannot See</td>\n      <td>Anthony Doerr</td>\n      <td>4.6</td>\n      <td>36348</td>\n      <td>14</td>\n      <td>2015</td>\n      <td>Fiction</td>\n    </tr>\n    <tr>\n      <th>33</th>\n      <td>Becoming</td>\n      <td>Michelle Obama</td>\n      <td>4.8</td>\n      <td>61133</td>\n      <td>11</td>\n      <td>2019</td>\n      <td>Non Fiction</td>\n    </tr>\n    <tr>\n      <th>36</th>\n      <td>Between the World and Me</td>\n      <td>Ta-Nehisi Coates</td>\n      <td>4.7</td>\n      <td>10070</td>\n      <td>13</td>\n      <td>2016</td>\n      <td>Non Fiction</td>\n    </tr>\n    <tr>\n      <th>41</th>\n      <td>Brown Bear, Brown Bear, What Do You See?</td>\n      <td>Bill Martin Jr.</td>\n      <td>4.9</td>\n      <td>14344</td>\n      <td>5</td>\n      <td>2019</td>\n      <td>Fiction</td>\n    </tr>\n    <tr>\n      <th>47</th>\n      <td>Catching Fire (The Hunger Games)</td>\n      <td>Suzanne Collins</td>\n      <td>4.7</td>\n      <td>22614</td>\n      <td>11</td>\n      <td>2011</td>\n      <td>Fiction</td>\n    </tr>\n    <tr>\n      <th>48</th>\n      <td>Catching Fire (The Hunger Games)</td>\n      <td>Suzanne Collins</td>\n      <td>4.7</td>\n      <td>22614</td>\n      <td>11</td>\n      <td>2012</td>\n      <td>Fiction</td>\n    </tr>\n    <tr>\n      <th>51</th>\n      <td>Crazy Love: Overwhelmed by a Relentless God</td>\n      <td>Francis Chan</td>\n      <td>4.7</td>\n      <td>1542</td>\n      <td>14</td>\n      <td>2010</td>\n      <td>Non Fiction</td>\n    </tr>\n    <tr>\n      <th>52</th>\n      <td>Crazy Love: Overwhelmed by a Relentless God</td>\n      <td>Francis Chan</td>\n      <td>4.7</td>\n      <td>1542</td>\n      <td>14</td>\n      <td>2011</td>\n      <td>Non Fiction</td>\n    </tr>\n    <tr>\n      <th>57</th>\n      <td>Cutting for Stone</td>\n      <td>Abraham Verghese</td>\n      <td>4.6</td>\n      <td>4866</td>\n      <td>11</td>\n      <td>2011</td>\n      <td>Fiction</td>\n    </tr>\n    <tr>\n      <th>64</th>\n      <td>Dear Zoo: A Lift-the-Flap Book</td>\n      <td>Rod Campbell</td>\n      <td>4.8</td>\n      <td>10922</td>\n      <td>5</td>\n      <td>2016</td>\n      <td>Fiction</td>\n    </tr>\n    <tr>\n      <th>65</th>\n      <td>Dear Zoo: A Lift-the-Flap Book</td>\n      <td>Rod Campbell</td>\n      <td>4.8</td>\n      <td>10922</td>\n      <td>5</td>\n      <td>2017</td>\n      <td>Fiction</td>\n    </tr>\n    <tr>\n      <th>66</th>\n      <td>Dear Zoo: A Lift-the-Flap Book</td>\n      <td>Rod Campbell</td>\n      <td>4.8</td>\n      <td>10922</td>\n      <td>5</td>\n      <td>2018</td>\n      <td>Fiction</td>\n    </tr>\n    <tr>\n      <th>70</th>\n      <td>Diagnostic and Statistical Manual of Mental Di...</td>\n      <td>American Psychiatric Association</td>\n      <td>4.5</td>\n      <td>6679</td>\n      <td>105</td>\n      <td>2014</td>\n      <td>Non Fiction</td>\n    </tr>\n    <tr>\n      <th>76</th>\n      <td>Divergent</td>\n      <td>Veronica Roth</td>\n      <td>4.6</td>\n      <td>27098</td>\n      <td>15</td>\n      <td>2014</td>\n      <td>Fiction</td>\n    </tr>\n    <tr>\n      <th>84</th>\n      <td>Dog Man: Brawl of the Wild: From the Creator o...</td>\n      <td>Dav Pilkey</td>\n      <td>4.9</td>\n      <td>7235</td>\n      <td>4</td>\n      <td>2019</td>\n      <td>Fiction</td>\n    </tr>\n    <tr>\n      <th>94</th>\n      <td>Eat to Live: The Amazing Nutrient-Rich Program...</td>\n      <td>Joel Fuhrman MD</td>\n      <td>4.5</td>\n      <td>6346</td>\n      <td>9</td>\n      <td>2012</td>\n      <td>Non Fiction</td>\n    </tr>\n    <tr>\n      <th>98</th>\n      <td>Educated: A Memoir</td>\n      <td>Tara Westover</td>\n      <td>4.7</td>\n      <td>28729</td>\n      <td>15</td>\n      <td>2019</td>\n      <td>Non Fiction</td>\n    </tr>\n    <tr>\n      <th>101</th>\n      <td>Fahrenheit 451</td>\n      <td>Ray Bradbury</td>\n      <td>4.6</td>\n      <td>10721</td>\n      <td>8</td>\n      <td>2018</td>\n      <td>Fiction</td>\n    </tr>\n    <tr>\n      <th>107</th>\n      <td>Fifty Shades of Grey: Book One of the Fifty Sh...</td>\n      <td>E L James</td>\n      <td>3.8</td>\n      <td>47265</td>\n      <td>14</td>\n      <td>2013</td>\n      <td>Fiction</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\n# Drop duplicates\nbestsellers = df.drop_duplicates(subset=\"Name\", keep=\"last\")\nbestsellers\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Name</th>\n      <th>Author</th>\n      <th>User Rating</th>\n      <th>Reviews</th>\n      <th>Price</th>\n      <th>Year</th>\n      <th>Genre</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>10-Day Green Smoothie Cleanse</td>\n      <td>JJ Smith</td>\n      <td>4.7</td>\n      <td>17350</td>\n      <td>8</td>\n      <td>2016</td>\n      <td>Non Fiction</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>11/22/63: A Novel</td>\n      <td>Stephen King</td>\n      <td>4.6</td>\n      <td>2052</td>\n      <td>22</td>\n      <td>2011</td>\n      <td>Fiction</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>12 Rules for Life: An Antidote to Chaos</td>\n      <td>Jordan B. Peterson</td>\n      <td>4.7</td>\n      <td>18979</td>\n      <td>15</td>\n      <td>2018</td>\n      <td>Non Fiction</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1984 (Signet Classics)</td>\n      <td>George Orwell</td>\n      <td>4.7</td>\n      <td>21424</td>\n      <td>6</td>\n      <td>2017</td>\n      <td>Fiction</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5,000 Awesome Facts (About Everything!) (Natio...</td>\n      <td>National Geographic Kids</td>\n      <td>4.8</td>\n      <td>7665</td>\n      <td>12</td>\n      <td>2019</td>\n      <td>Non Fiction</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>538</th>\n      <td>Winter of the World: Book Two of the Century T...</td>\n      <td>Ken Follett</td>\n      <td>4.5</td>\n      <td>10760</td>\n      <td>15</td>\n      <td>2012</td>\n      <td>Fiction</td>\n    </tr>\n    <tr>\n      <th>539</th>\n      <td>Women Food and God: An Unexpected Path to Almo...</td>\n      <td>Geneen Roth</td>\n      <td>4.2</td>\n      <td>1302</td>\n      <td>11</td>\n      <td>2010</td>\n      <td>Non Fiction</td>\n    </tr>\n    <tr>\n      <th>544</th>\n      <td>Wonder</td>\n      <td>R. J. Palacio</td>\n      <td>4.8</td>\n      <td>21625</td>\n      <td>9</td>\n      <td>2017</td>\n      <td>Fiction</td>\n    </tr>\n    <tr>\n      <th>545</th>\n      <td>Wrecking Ball (Diary of a Wimpy Kid Book 14)</td>\n      <td>Jeff Kinney</td>\n      <td>4.9</td>\n      <td>9413</td>\n      <td>8</td>\n      <td>2019</td>\n      <td>Fiction</td>\n    </tr>\n    <tr>\n      <th>549</th>\n      <td>You Are a Badass: How to Stop Doubting Your Gr...</td>\n      <td>Jen Sincero</td>\n      <td>4.7</td>\n      <td>14331</td>\n      <td>8</td>\n      <td>2019</td>\n      <td>Non Fiction</td>\n    </tr>\n  </tbody>\n</table>\n<p>349 rows × 7 columns</p>\n</div>\n```\n:::\n:::\n\n\nResumen:\n- Hemos corregido los errores ortográficos de los títulos y autores.\n- Hemos seleccionado las muestras más recientes de cada libro.\n\nHemos reducido el tamaño del dataset de 550 a 349 muestras.\n\n### 3.3 Outlier Analysis\n\n#### 3.3.2 Usando boxplot y IQR \nIQR: El rango intercuartil (IQR) es la diferencia entre el tercer cuartil (Q3) y el primer cuartil (Q1). Los valores que caen por debajo de Q1 - 1.5 * IQR o por encima de Q3 + 1.5 * IQR se consideran outliers.\n\nLos valores fuera del de este rango, son los que se representa como puntos en los bloxpots.\n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\nimport plotly.express as px\n\nselected_columns = [\"Reviews\", \"Price\"]\n\nfor column in selected_columns:\n    fig = px.box(df, x=column, title=f\"Boxplot of {column}\")\n    fig.update_layout(title_x=0.5)  # Centra el título\n    fig.show()\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<div>                            <div id=\"1d1b209e-199d-414f-a91d-d01fd8b0f8d6\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                require([\"plotly\"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"1d1b209e-199d-414f-a91d-d01fd8b0f8d6\")) {                    Plotly.newPlot(                        \"1d1b209e-199d-414f-a91d-d01fd8b0f8d6\",                        [{\"alignmentgroup\":\"True\",\"hovertemplate\":\"Reviews=%{x}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"legendgroup\":\"\",\"marker\":{\"color\":\"#636efa\"},\"name\":\"\",\"notched\":false,\"offsetgroup\":\"\",\"orientation\":\"h\",\"showlegend\":false,\"x\":[17350,2052,18979,21424,7665,12643,19735,19699,5983,23848,23848,460,4149,5153,5013,2313,2925,2951,2426,9198,36348,36348,6310,15921,12159,798,9374,491,5360,1909,1296,615,61133,61133,11113,10070,10070,3729,9769,471,14344,14344,4505,10369,16244,2884,22614,22614,22614,4761,1542,1542,1542,6143,4022,3871,4866,4866,1329,4642,1541,1924,2094,10922,10922,10922,10922,2137,1651,6679,6679,6812,3837,6540,7955,27098,27098,17684,37,15845,3181,5062,4786,7235,7235,12619,9089,5470,5118,2134,2525,720,956,6346,6346,5505,5505,28729,28729,5413,10721,10721,4370,6042,23631,20262,47265,47265,13964,13677,17323,17323,17323,17323,17323,1555,3642,1215,5594,5594,5594,408,4799,14038,14038,14038,14038,14038,7660,22288,22288,1365,14982,9568,1636,57271,57271,57271,10141,3457,3457,3457,3457,8837,8837,8837,7038,7038,5972,25624,5476,5867,4148,19622,23973,7758,3146,10052,3564,13471,1930,15779,15779,15526,15526,3776,25001,25001,25001,25001,25001,5272,3490,3490,2812,4896,9737,1320,16643,16643,7153,4571,29651,5299,7396,7396,7062,19576,19576,19576,19576,19576,19576,978,4748,8393,11391,8634,9342,9342,10927,5235,8916,2507,3673,3673,3673,11881,6990,6990,6990,6990,6990,6132,3014,7550,3828,2752,1467,1884,25706,8491,1649,18613,18613,9867,1386,10199,2926,17739,17739,17739,3113,5542,5542,5542,26741,26741,26741,5347,7866,5680,5178,8093,3192,21834,21834,21834,21834,21834,21834,21834,21834,6169,4519,3163,3163,1831,18904,21930,10426,10426,10820,10820,548,16990,16990,16990,3503,13616,13616,8580,8580,8580,8580,8580,8580,8580,8580,8580,8580,4757,10009,10009,1985,1985,22536,22536,7150,3836,7802,7802,3619,23047,23047,9366,1265,3923,2272,973,220,7827,7827,9382,5069,5069,5069,5069,5069,5069,5069,5069,5069,1583,1907,23114,637,637,2314,4587,3477,3477,3477,3477,3477,25554,25554,25554,25554,25554,1680,9325,9325,9325,9325,4725,4725,4725,35799,2580,11813,11813,3536,6600,1789,12361,858,23148,23148,8081,8081,23358,23358,9372,4633,13061,13061,3523,2774,440,8922,8922,8922,2023,1859,50482,50482,50482,50482,3207,3207,3207,3207,3207,803,23308,23308,23308,23308,23308,23308,5836,79446,79446,7747,7747,7251,7251,10559,10559,5249,5249,33844,33844,11616,11616,11616,13609,8587,29442,11098,9947,13871,13871,13871,13871,6982,32122,32122,32122,16949,16949,9289,9289,9289,7368,7368,4028,4628,4628,5396,4247,4247,22641,22641,22641,22641,6222,4506,8747,1655,7861,6247,39459,10101,5898,2744,49288,49288,1201,1201,1201,1201,1201,807,3759,2663,3428,2876,3601,7058,9784,9784,10795,10191,14493,2186,1204,2091,19720,19720,2122,27536,4290,26490,26490,26490,5487,6377,1463,3759,3503,11550,3801,3796,9030,19546,19546,19546,19546,19546,19546,19546,7508,7508,7508,8842,8842,8842,8842,30183,30183,6169,7034,11034,11034,7932,1904,3319,3319,11128,11128,11128,11128,5977,26234,26234,26234,26234,26234,4360,2282,438,11676,2586,29673,29673,29673,29673,29673,6740,5956,6108,4585,3829,8958,5492,9292,1873,8170,3341,7497,7497,13779,87841,9967,6669,17044,10760,1302,21625,21625,21625,21625,21625,9413,14331,14331,14331,14331],\"x0\":\" \",\"xaxis\":\"x\",\"y0\":\" \",\"yaxis\":\"y\",\"type\":\"box\"}],                        {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"Reviews\"}},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0]},\"legend\":{\"tracegroupgap\":0},\"title\":{\"text\":\"Boxplot of Reviews\",\"x\":0.5},\"boxmode\":\"group\"},                        {\"responsive\": true}                    ).then(function(){\n                            \nvar gd = document.getElementById('1d1b209e-199d-414f-a91d-d01fd8b0f8d6');\nvar x = new MutationObserver(function (mutations, observer) {{\n        var display = window.getComputedStyle(gd).display;\n        if (!display || display === 'none') {{\n            console.log([gd, 'removed!']);\n            Plotly.purge(gd);\n            observer.disconnect();\n        }}\n}});\n\n// Listen for the removal of the full notebook cells\nvar notebookContainer = gd.closest('#notebook-container');\nif (notebookContainer) {{\n    x.observe(notebookContainer, {childList: true});\n}}\n\n// Listen for the clearing of the current output cell\nvar outputEl = gd.closest('.output');\nif (outputEl) {{\n    x.observe(outputEl, {childList: true});\n}}\n\n                        })                };                });            </script>        </div>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<div>                            <div id=\"e736fbec-e2fb-4f8d-b3ab-04353d5281a5\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                require([\"plotly\"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"e736fbec-e2fb-4f8d-b3ab-04353d5281a5\")) {                    Plotly.newPlot(                        \"e736fbec-e2fb-4f8d-b3ab-04353d5281a5\",                        [{\"alignmentgroup\":\"True\",\"hovertemplate\":\"Price=%{x}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"legendgroup\":\"\",\"marker\":{\"color\":\"#636efa\"},\"name\":\"\",\"notched\":false,\"offsetgroup\":\"\",\"orientation\":\"h\",\"showlegend\":false,\"x\":[8,22,15,6,12,11,30,15,3,8,8,2,32,5,17,4,6,6,8,13,14,14,13,9,13,5,9,14,5,11,24,21,11,11,15,13,13,18,13,8,5,5,0,4,18,28,11,11,11,16,14,14,14,8,4,5,11,11,10,13,4,8,4,5,5,5,5,17,15,105,105,0,15,22,5,15,15,6,6,13,12,6,8,4,4,8,8,6,20,5,16,1,14,9,9,7,18,15,15,9,8,8,15,2,7,11,14,14,32,6,4,4,4,4,4,9,0,9,5,5,5,20,16,4,4,4,4,4,12,12,12,11,19,9,6,10,10,9,6,14,14,14,14,5,5,5,7,7,10,14,7,54,11,30,12,18,30,22,9,52,4,10,10,14,14,22,11,11,11,11,11,16,15,15,17,17,7,7,4,4,9,21,14,20,13,13,12,8,8,8,8,8,8,0,12,17,12,25,10,10,6,5,6,8,4,4,4,13,4,4,4,4,4,13,21,6,15,18,10,0,12,7,13,5,5,16,20,11,27,8,8,8,6,10,10,10,8,8,8,16,11,10,9,14,22,8,8,8,8,8,8,8,8,7,12,13,13,9,13,11,20,20,5,5,2,27,27,27,9,10,10,46,46,46,46,46,46,46,46,46,46,4,20,7,9,9,12,12,12,12,20,20,10,6,6,9,11,16,6,25,17,20,20,6,17,17,17,17,17,17,17,17,17,18,13,18,20,20,22,21,28,28,28,28,28,8,8,8,8,8,12,24,24,24,24,16,16,16,39,9,10,10,17,11,14,12,53,6,6,8,8,12,12,12,21,6,6,13,0,11,9,9,9,15,11,13,13,7,13,6,6,6,6,6,9,6,6,6,6,6,6,0,18,7,14,14,9,16,2,2,5,5,20,20,7,7,7,14,10,7,13,11,6,6,8,7,14,14,8,8,30,30,13,9,9,7,7,9,7,7,20,13,13,11,11,11,11,18,14,19,13,5,10,9,8,8,12,11,11,40,40,40,40,40,36,16,17,14,21,18,17,5,5,21,18,18,12,14,12,8,8,0,14,10,15,15,15,9,7,10,6,9,10,82,12,10,5,5,5,5,5,5,5,16,16,16,10,10,10,10,4,4,16,15,19,19,9,23,11,11,23,23,23,23,12,0,0,0,0,7,21,21,15,9,5,16,16,16,13,16,20,11,4,9,42,12,18,17,14,13,9,6,6,14,15,13,12,18,15,11,9,9,9,9,9,8,8,8,8,8],\"x0\":\" \",\"xaxis\":\"x\",\"y0\":\" \",\"yaxis\":\"y\",\"type\":\"box\"}],                        {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"Price\"}},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0]},\"legend\":{\"tracegroupgap\":0},\"title\":{\"text\":\"Boxplot of Price\",\"x\":0.5},\"boxmode\":\"group\"},                        {\"responsive\": true}                    ).then(function(){\n                            \nvar gd = document.getElementById('e736fbec-e2fb-4f8d-b3ab-04353d5281a5');\nvar x = new MutationObserver(function (mutations, observer) {{\n        var display = window.getComputedStyle(gd).display;\n        if (!display || display === 'none') {{\n            console.log([gd, 'removed!']);\n            Plotly.purge(gd);\n            observer.disconnect();\n        }}\n}});\n\n// Listen for the removal of the full notebook cells\nvar notebookContainer = gd.closest('#notebook-container');\nif (notebookContainer) {{\n    x.observe(notebookContainer, {childList: true});\n}}\n\n// Listen for the clearing of the current output cell\nvar outputEl = gd.closest('.output');\nif (outputEl) {{\n    x.observe(outputEl, {childList: true});\n}}\n\n                        })                };                });            </script>        </div>\n```\n:::\n:::\n\n\nObservaciones:\n\n- age: no se detectan outliers\n- BMI: existen outliers, personas con una alta obesidad\n- charges: existen outliers, personas con cargos muy altos al seguro\n\n### 3.4 Zero & Near Zero Variance Features\n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\nbestsellers.describe()\n```\n\n::: {.cell-output .cell-output-display execution_count=16}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>User Rating</th>\n      <th>Reviews</th>\n      <th>Price</th>\n      <th>Year</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>349.000000</td>\n      <td>349.000000</td>\n      <td>349.000000</td>\n      <td>349.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>4.608596</td>\n      <td>9811.922636</td>\n      <td>12.962751</td>\n      <td>2014.128940</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>0.227266</td>\n      <td>10899.783863</td>\n      <td>10.011562</td>\n      <td>3.377239</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>3.300000</td>\n      <td>37.000000</td>\n      <td>0.000000</td>\n      <td>2009.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>4.500000</td>\n      <td>3428.000000</td>\n      <td>8.000000</td>\n      <td>2011.000000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>4.600000</td>\n      <td>6310.000000</td>\n      <td>11.000000</td>\n      <td>2014.000000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>4.800000</td>\n      <td>11550.000000</td>\n      <td>16.000000</td>\n      <td>2017.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>4.900000</td>\n      <td>87841.000000</td>\n      <td>105.000000</td>\n      <td>2019.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nVariables númericas\n\n::: {.cell execution_count=17}\n``` {.python .cell-code}\nselected_columns = [\"User Rating\", \"Reviews\", \"Price\"]\n\n# Calcular la varianza de cada columna\nvariances = bestsellers[selected_columns].var()\n\n# Definir un umbral para la varianza\nthreshold = 0.1\n\n# Identificar las columnas con varianza cercana a cero o muy pequeña\nzero_variance_cols = variances[variances <= threshold].index\n\nprint(\"Columnas con Zero & Near Zero Variance:\")\nprint(zero_variance_cols)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nColumnas con Zero & Near Zero Variance:\nIndex(['User Rating'], dtype='object')\n```\n:::\n:::\n\n\nVariables categoricas. No tiene sentido en este analisis en este caso.\n\nObserviaciones:\n\n- No se detectan variables con Zero & Near Zero Variance\n\n### 3.5 Missing values\n\n::: {.cell execution_count=18}\n``` {.python .cell-code}\nbestsellers.isnull().sum()\n```\n\n::: {.cell-output .cell-output-display execution_count=18}\n```\nName           0\nAuthor         0\nUser Rating    0\nReviews        0\nPrice          0\nYear           0\nGenre          0\ndtype: int64\n```\n:::\n:::\n\n\nObserviaciones:\n\n- No hay Missing values\n\n# 4. Hipothesis Testing\n\nVamos a responder a las siguientes preguntas con validez estadística:\n- ¿Los géneros difieren en User Rating?\n- ¿Los géneros difieren en número de Reviews?\n- ¿Los géneros difieren en términos de precio?\n\n## ¿Los géneros difieren en User Rating?\n\nVamos a crear una variable para cada grupo de interes y representarlos gráficamente.\n\n::: {.cell execution_count=19}\n``` {.python .cell-code}\nfiction_bestsellers = bestsellers[bestsellers[\"Genre\"] == \"Fiction\"]\nnonfiction_bestsellers = bestsellers[bestsellers[\"Genre\"] == \"Non Fiction\"]\n```\n:::\n\n\n::: {.cell execution_count=20}\n``` {.python .cell-code}\nsns.kdeplot(fiction_bestsellers[\"User Rating\"], fill=True, color=\"r\")\nsns.kdeplot(nonfiction_bestsellers[\"User Rating\"], fill=True, color=\"b\")\nplt.legend([\"Fiction\", \"Non Fiction\"])\nplt.xlabel(\"User Rating\")\nplt.ylabel(\"Density\")\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](bestsellers_with_categories_hypothesis_testing_files/figure-html/cell-21-output-1.png){width=589 height=429}\n:::\n:::\n\n\n::: {.cell execution_count=21}\n``` {.python .cell-code}\n# Calcular el coeficiente de asimetría\nskewness = stats.skew(bestsellers[\"User Rating\"])\nprint(\"Coeficiente de asimetría:\", skewness)\n\nif skewness > 0:\n    print(\"La distribución está positivamente sesgada.\")\nelif skewness < 0:\n    print(\"La distribución está negativamente sesgada.\")\nelse:\n    print(\"La distribución es simétrica.\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCoeficiente de asimetría: -1.521358275451138\nLa distribución está negativamente sesgada.\n```\n:::\n:::\n\n\nNúmero de observaciones para cada grupo:\n\n::: {.cell execution_count=22}\n``` {.python .cell-code}\nbestsellers[\"Genre\"].value_counts()\n```\n\n::: {.cell-output .cell-output-display execution_count=22}\n```\nGenre\nNon Fiction    190\nFiction        159\nName: count, dtype: int64\n```\n:::\n:::\n\n\nRealizamos un test de normalidad para cada grupo:\n\n::: {.cell execution_count=23}\n``` {.python .cell-code}\nfrom scipy import stats\n\n\ndef shapiro_test(data, alpha=0.05):\n    \"\"\"\n    Realiza la prueba de Shapiro-Wilk para verificar la normalidad de los datos.\n\n    Parameters:\n    data (array-like): Los datos a analizar.\n    alpha (float): Nivel de significancia.\n\n    Returns:\n    str: El resultado de la prueba.\n    \"\"\"\n    statistic, p_value = stats.shapiro(data)\n\n    if p_value < alpha:\n        return (\n            \"Rechazamos la hipótesis nula. Los datos no siguen una distribución normal.\"\n        )\n    else:\n        return \"Fallamos al rechazar la hipótesis nula. Los datos pueden considerarse normalmente distribuidos.\"\n\n\nresult_fiction = shapiro_test(fiction_bestsellers[\"User Rating\"])\nresult_nonfiction = shapiro_test(nonfiction_bestsellers[\"User Rating\"])\n\nprint(\"Para bestsellers de ficción:\", result_fiction)\nprint(\"Para bestsellers de no ficción:\", result_nonfiction)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nPara bestsellers de ficción: Rechazamos la hipótesis nula. Los datos no siguen una distribución normal.\nPara bestsellers de no ficción: Rechazamos la hipótesis nula. Los datos no siguen una distribución normal.\n```\n:::\n:::\n\n\nEstudiemos la relación entre las varianzas de cada grupo.\n\n::: {.cell execution_count=24}\n``` {.python .cell-code}\n# Realiza el Test de Levene\nstatistic, p_value = stats.levene(\n    fiction_bestsellers[\"User Rating\"], nonfiction_bestsellers[\"User Rating\"]\n)\n\n# Nivel de significancia\nalpha = 0.05\n\n# Comprueba la significancia\nif p_value < alpha:\n    print(\"Rechazamos la hipótesis nula. Las varianzas no son similares\")\nelse:\n    print(\"Fallamos al rechazar la hipótesis nula. Las varianzas son similares\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRechazamos la hipótesis nula. Las varianzas no son similares\n```\n:::\n:::\n\n\n::: {.cell execution_count=25}\n``` {.python .cell-code}\n# varianza de los grupos\nbestsellers.groupby([\"Genre\"])[\"User Rating\"].var()\n```\n\n::: {.cell-output .cell-output-display execution_count=25}\n```\nGenre\nFiction        0.075720\nNon Fiction    0.031736\nName: User Rating, dtype: float64\n```\n:::\n:::\n\n\n### 1. Seleccionamos la hipotesis y el nivel de significancia\n\nH0: El \"User Rating\" de los libros de ficción es igual que el de los libros de no ficción\n\nHa: El \"User Rating\" de los libros de ficción es diferente que el de los libros de no ficción\n\nalpha = 0.05\n\n### 2. Identificamos el tipo de test\n\nDeseamos comparar las medias de dos grupos de nuestra Sample. Por lo que un 2-Sample t-Test parece lo adecuado. Lo primero es ver si se cumplen los requisitos del test.\n\n#### 2.1 Requisitos del test\n[Book:Hypothesis Testing An Intuitive Guide For Making Data Driven Decisions\nPage: 48\nSection: 2-Sample t-Tests]\n- Tenemos un Sample representativo de la población? Si.\n- Los datos son continuos? \n  - En este contexto, los \"User Rating\" que van de 0 a 5 con un único decimal pueden considerarse como datos continuos. Sim embargo, observando las gráficas, vemos que la mayoría de los valores se encuetran en un intervalor muy pequeño (mayores a 4.0). Esto dificulta el poder considerarlo continuos.\n- Las muestras siguen una distribución normal o hay más de 15 observaciones\n  - No, las muestras no siguen una distribución normal. Pero hay más de 15 observaciones en cada grupo, gracias al teorema del límite central podemos renunciar al supuesto de normalidad.\n- Los grupos son independientes? Si.\n- Las varianzas son iguales (o al menos similares)?\n  - No.\n\n\nPor la falta de continuidad en los datos, vamos a realizar un **test no paramétrico Mann-Whitney**.\n\n[Book:Hypothesis Testing An Intuitive Guide For Making Data Driven Decisions\nPage: 341\nSection: Analyzing Likert Scale Data]\n\nPara realizar el test vamos a usar [scipy.stats.mannwhitneyu](https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.mannwhitneyu.html)\n\n::: {.cell execution_count=26}\n``` {.python .cell-code}\n# Realiza el test de Mann-Whitney\nstatistic, p_value = stats.mannwhitneyu(\n    nonfiction_bestsellers[\"User Rating\"], fiction_bestsellers[\"User Rating\"]\n)\n\n# Imprime los resultados\nprint(\"Valor p:\", p_value)\n\n# Comprueba la significancia\nalpha = 0.05  # Nivel de significancia\nif p_value < alpha:\n    print(\n        \"Rechazamos la hipótesis nula. Hay diferencias significativas entre los grupos.\"\n    )\nelse:\n    print(\n        \"Fallamos al rechazar la hipótesis nula. No hay diferencias significativas entre los grupos.\"\n    )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nValor p: 0.019840907319029977\nRechazamos la hipótesis nula. Hay diferencias significativas entre los grupos.\n```\n:::\n:::\n\n\n## ¿Los géneros difieren en número de Reviews?\n\nRepresentamos gráficamente los grupos de interés.\n\n::: {.cell execution_count=27}\n``` {.python .cell-code}\nsns.kdeplot(fiction_bestsellers[\"Reviews\"], fill=True, color=\"r\")\nsns.kdeplot(nonfiction_bestsellers[\"Reviews\"], fill=True, color=\"b\")\nplt.legend([\"Fiction\", \"Non Fiction\"])\nplt.xlabel(\"User Rating\")\nplt.ylabel(\"Density\")\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](bestsellers_with_categories_hypothesis_testing_files/figure-html/cell-28-output-1.png){width=576 height=443}\n:::\n:::\n\n\n::: {.cell execution_count=28}\n``` {.python .cell-code}\n# Calcular el coeficiente de asimetría\nskewness = stats.skew(bestsellers[\"Reviews\"])\nprint(\"Coeficiente de asimetría:\", skewness)\n\nif skewness > 0:\n    print(\"La distribución está positivamente sesgada.\")\nelif skewness < 0:\n    print(\"La distribución está negativamente sesgada.\")\nelse:\n    print(\"La distribución es simétrica.\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCoeficiente de asimetría: 3.119812029552558\nLa distribución está positivamente sesgada.\n```\n:::\n:::\n\n\nNúmero de observaciones para cada grupo:\n\n::: {.cell execution_count=29}\n``` {.python .cell-code}\nbestsellers[\"Genre\"].value_counts()\n```\n\n::: {.cell-output .cell-output-display execution_count=29}\n```\nGenre\nNon Fiction    190\nFiction        159\nName: count, dtype: int64\n```\n:::\n:::\n\n\nRealizamos un test de normalidad para cada grupo:\n\n::: {.cell execution_count=30}\n``` {.python .cell-code}\nfrom scipy import stats\n\n\ndef shapiro_test(data, alpha=0.05):\n    \"\"\"\n    Realiza la prueba de Shapiro-Wilk para verificar la normalidad de los datos.\n\n    Parameters:\n    data (array-like): Los datos a analizar.\n    alpha (float): Nivel de significancia.\n\n    Returns:\n    str: El resultado de la prueba.\n    \"\"\"\n    statistic, p_value = stats.shapiro(data)\n\n    if p_value < alpha:\n        return (\n            \"Rechazamos la hipótesis nula. Los datos no siguen una distribución normal.\"\n        )\n    else:\n        return \"Fallamos al rechazar la hipótesis nula. Los datos pueden considerarse normalmente distribuidos.\"\n\n\nresult_fiction = shapiro_test(fiction_bestsellers[\"Reviews\"])\nresult_nonfiction = shapiro_test(nonfiction_bestsellers[\"Reviews\"])\n\nprint(\"Para bestsellers de ficción:\", result_fiction)\nprint(\"Para bestsellers de no ficción:\", result_nonfiction)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nPara bestsellers de ficción: Rechazamos la hipótesis nula. Los datos no siguen una distribución normal.\nPara bestsellers de no ficción: Rechazamos la hipótesis nula. Los datos no siguen una distribución normal.\n```\n:::\n:::\n\n\nEstudiemos la relación entre las varianzas de cada grupo.\n\n::: {.cell execution_count=31}\n``` {.python .cell-code}\n# varianza de los grupos\nbestsellers.groupby([\"Genre\"])[\"Reviews\"].var()\n```\n\n::: {.cell-output .cell-output-display execution_count=31}\n```\nGenre\nFiction        1.781185e+08\nNon Fiction    5.265203e+07\nName: Reviews, dtype: float64\n```\n:::\n:::\n\n\n::: {.cell execution_count=32}\n``` {.python .cell-code}\n# Realiza el Test de Levene\nstatistic, p_value = stats.levene(\n    fiction_bestsellers[\"User Rating\"], nonfiction_bestsellers[\"User Rating\"]\n)\n\n# Nivel de significancia\nalpha = 0.05\n\n# Comprueba la significancia\nif p_value < alpha:\n    print(\"Rechazamos la hipótesis nula. Las varianzas no son similares\")\nelse:\n    print(\"Fallamos al rechazar la hipótesis nula. Las varianzas son similares\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRechazamos la hipótesis nula. Las varianzas no son similares\n```\n:::\n:::\n\n\n### 1. Seleccionamos la hipotesis y el nivel de significancia\n\nH0: El número de Reviews medio de los libros de ficción es igual que el de los libros de no ficción\n\nHa: El número de Reviews medio de los libros de ficción es diferente que el de los libros de no ficción\n\nalpha = 0.05\n\n### 2. Identificamos el tipo de test\n\nDeseamos comparar las medias de dos grupos de nuestra Sample. Por lo que un 2-Sample t-Test parece lo adecuado. Lo primero es ver si se cumplen los requisitos del test.\n\n#### 2.1 Requisitos del test\n[Book:Hypothesis Testing An Intuitive Guide For Making Data Driven Decisions\nPage: 48\nSection: 2-Sample t-Tests]\n- Tenemos un Sample representativo de la población? Si.\n- Los datos son continuos? Si.\n- Las muestras siguen una distribución normal o hay más de 15 observaciones\n  - No, las muestras no siguen una distribución normal. Pero hay más de 15 observaciones en cada grupo, gracias al teorema del límite central podemos renunciar al supuesto de normalidad.\n- Los grupos son independientes? Si.\n- Las varianzas son iguales (o al menos similares)?\n  - No.\n\n\nLas varianzas no son similares y su relación es de más del doble. Vamos a reliazar un test tipo **Welch's t-test**.\n\nPara realizar el test vamos a usar [scipy.stats.ttest_ind](https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.ttest_ind.html).\nPara realizar este test, es necesario definir el parametro *equal_varbool* como *False*.\n\n::: {.cell execution_count=33}\n``` {.python .cell-code}\n# Realiza el test t de Welch (equal_var=False)\nstatistic, p_value = stats.ttest_ind(\n    nonfiction_bestsellers[\"Reviews\"], fiction_bestsellers[\"Reviews\"], equal_var=False\n)\n\n# Imprime los resultados\nprint(\"Valor p:\", p_value)\n\n# Comprueba la significancia\nalpha = 0.05  # Nivel de significancia\nif p_value < alpha:\n    print(\n        \"Rechazamos la hipótesis nula: Hay diferencias significativas entre los grupos.\"\n    )\nelse:\n    print(\n        \"No podemos rechazar la hipótesis nula: No hay diferencias significativas entre los grupos.\"\n    )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nValor p: 4.7012426165976585e-07\nRechazamos la hipótesis nula: Hay diferencias significativas entre los grupos.\n```\n:::\n:::\n\n\nLos libros del género de ficción obtienen más Reviews que los libros de no ficción.\n\n## ¿Los géneros difieren en términos de Price?\n\nRepresentamos gráficamente los datos.\n\n::: {.cell execution_count=34}\n``` {.python .cell-code}\nsns.kdeplot(fiction_bestsellers[\"Price\"], fill=True, color=\"r\")\nsns.kdeplot(nonfiction_bestsellers[\"Price\"], fill=True, color=\"b\")\nplt.legend([\"Fiction\", \"Non Fiction\"])\nplt.xlabel(\"User Rating\")\nplt.ylabel(\"Density\")\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](bestsellers_with_categories_hypothesis_testing_files/figure-html/cell-35-output-1.png){width=602 height=429}\n:::\n:::\n\n\n::: {.cell execution_count=35}\n``` {.python .cell-code}\n# Calcular el coeficiente de asimetría\nskewness = stats.skew(bestsellers[\"Price\"])\nprint(\"Coeficiente de asimetría:\", skewness)\n\nif skewness > 0:\n    print(\"La distribución está positivamente sesgada.\")\nelif skewness < 0:\n    print(\"La distribución está negativamente sesgada.\")\nelse:\n    print(\"La distribución es simétrica.\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCoeficiente de asimetría: 4.059768474746167\nLa distribución está positivamente sesgada.\n```\n:::\n:::\n\n\nRealizamos un test de normalidad para cada grupo:\n\n::: {.cell execution_count=36}\n``` {.python .cell-code}\nfrom scipy import stats\n\n\ndef shapiro_test(data, alpha=0.05):\n    \"\"\"\n    Realiza la prueba de Shapiro-Wilk para verificar la normalidad de los datos.\n\n    Parameters:\n    data (array-like): Los datos a analizar.\n    alpha (float): Nivel de significancia.\n\n    Returns:\n    str: El resultado de la prueba.\n    \"\"\"\n    statistic, p_value = stats.shapiro(data)\n\n    if p_value < alpha:\n        return (\n            \"Rechazamos la hipótesis nula. Los datos no siguen una distribución normal.\"\n        )\n    else:\n        return \"Fallamos al rechazar la hipótesis nula. Los datos pueden considerarse normalmente distribuidos.\"\n\n\nresult_fiction = shapiro_test(fiction_bestsellers[\"Price\"])\nresult_nonfiction = shapiro_test(nonfiction_bestsellers[\"Price\"])\n\nprint(\"Para bestsellers de ficción:\", result_fiction)\nprint(\"Para bestsellers de no ficción:\", result_nonfiction)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nPara bestsellers de ficción: Rechazamos la hipótesis nula. Los datos no siguen una distribución normal.\nPara bestsellers de no ficción: Rechazamos la hipótesis nula. Los datos no siguen una distribución normal.\n```\n:::\n:::\n\n\nEstudiemos la relación entre las varianzas de cada grupo.\n\n::: {.cell execution_count=37}\n``` {.python .cell-code}\n# Realiza el Test de Levene\nstatistic, p_value = stats.levene(\n    fiction_bestsellers[\"Price\"], nonfiction_bestsellers[\"Price\"]\n)\n\n# Nivel de significancia\nalpha = 0.05\n\n# Comprueba la significancia\nif p_value < alpha:\n    print(\"Rechazamos la hipótesis nula. Las varianzas no son similares\")\nelse:\n    print(\"Fallamos al rechazar la hipótesis nula. Las varianzas son similares\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nFallamos al rechazar la hipótesis nula. Las varianzas son similares\n```\n:::\n:::\n\n\n::: {.cell execution_count=38}\n``` {.python .cell-code}\n# varianza de los grupos\nbestsellers.groupby([\"Genre\"])[\"Price\"].var()\n```\n\n::: {.cell-output .cell-output-display execution_count=38}\n```\nGenre\nFiction         91.521376\nNon Fiction    107.024673\nName: Price, dtype: float64\n```\n:::\n:::\n\n\n### 1. Seleccionamos la hipotesis y el nivel de significancia\n\nH0: El precio medio de los libros de ficción es igual que el de los libros de no ficción\n\nHa: El precio medio de los libros de ficción es diferente que el de los libros de no ficción\n\nalpha = 0.05\n\n### 2. Identificamos el tipo de test\n\nDeseamos comparar las medias de dos grupos de nuestra Sample. Por lo que un 2-Sample t-Test parece lo adecuado. Lo primero es ver si se cumplen los requisitos del test.\n\n#### 2.1 Requisitos del test\n[Book:Hypothesis Testing An Intuitive Guide For Making Data Driven Decisions\nPage: 48\nSection: 2-Sample t-Tests]\n- Tenemos un Sample representativo de la población? Si.\n- Los datos son continuos? Si.\n- Las muestras siguen una distribución normal o hay más de 15 observaciones\n  - No, las muestras no siguen una distribución normal. Pero hay más de 15 observaciones en cada grupo, gracias al teorema del límite central podemos renunciar al supuesto de normalidad.\n- Los grupos son independientes? Si.\n- Las varianzas son iguales (o al menos similares)? Si.\n\nSe cumplen los requisitos para realizar un **2-Sample t-Test**.\n\nPara realizar el test vamos a usar [scipy.stats.ttest_ind](https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.ttest_ind.html).\n\n::: {.cell execution_count=39}\n``` {.python .cell-code}\n# Realiza el test t\nstatistic, p_value = stats.ttest_ind(\n    nonfiction_bestsellers[\"Price\"], fiction_bestsellers[\"Price\"]\n)\n\n# Imprime los resultados\nprint(\"Valor p:\", p_value)\n\n# Comprueba la significancia\nalpha = 0.05  # Nivel de significancia\nif p_value < alpha:\n    print(\n        \"Rechazamos la hipótesis nula: Hay diferencias significativas entre los grupos.\"\n    )\nelse:\n    print(\n        \"No podemos rechazar la hipótesis nula: No hay diferencias significativas entre los grupos.\"\n    )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nValor p: 0.16615124881617802\nNo podemos rechazar la hipótesis nula: No hay diferencias significativas entre los grupos.\n```\n:::\n:::\n\n\nEl precio no es dependiente del género.\n\n",
    "supporting": [
      "bestsellers_with_categories_hypothesis_testing_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n<script type=\"text/javascript\">\nwindow.PlotlyConfig = {MathJaxConfig: 'local'};\nif (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}\nif (typeof require !== 'undefined') {\nrequire.undef(\"plotly\");\nrequirejs.config({\n    paths: {\n        'plotly': ['https://cdn.plot.ly/plotly-2.26.0.min']\n    }\n});\nrequire(['plotly'], function(Plotly) {\n    window._Plotly = Plotly;\n});\n}\n</script>\n\n"
      ]
    }
  }
}